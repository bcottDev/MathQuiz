/*
    ICTPRG532 AT2 - Math Quiz Application
    File name:  MathQuiz_Teacher.java
    Author:     Benjamin Cotterill
    Version:    1.0
    Notes:      Includes quiz control panel for teacher and server components of client/server network.
 */

package mathquiz;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import org.BinaryTree;

public class MathQuiz_Teacher extends javax.swing.JFrame {
    static ServerSocket serverSocket;
    static Socket socket;
    static DataInputStream dataInputStream;
    static DataOutputStream dataOutputStream;
    private final DefaultTableModel mathQuiz_TableModel;
    private static Question q;
    private static ArrayList<Question> arrayMathQuestions;
    private final BinaryTree<Question> btMathQuestions;
    private static LinkedList<Question> listMathQuestions;
    private Object [][] objDataSet;

    /** Creates new form MathQuiz_Teacher */
    public MathQuiz_Teacher() {
        
        String [] columnsMathQuestions = new String[] {"LOp", "op", "ROp", "=", "Ans"};
        mathQuiz_TableModel = new DefaultTableModel() { @Override public boolean isCellEditable(int rowIndex, int mColIndex) { return false; } };
        mathQuiz_TableModel.setColumnIdentifiers(columnsMathQuestions);
        arrayMathQuestions = new ArrayList<>();
        btMathQuestions = new BinaryTree<>();
        listMathQuestions = new LinkedList<>();
        objDataSet = null;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        core_JPanel = new javax.swing.JPanel();
        teacher_JPanel = new javax.swing.JPanel();
        teacher_JLabel = new javax.swing.JLabel();
        input_JPanel = new javax.swing.JPanel();
        inputGuide_JLabel = new javax.swing.JLabel();
        firstNum_JLabel = new javax.swing.JLabel();
        firstNum_JTextField = new javax.swing.JTextField();
        operator_JLabel = new javax.swing.JLabel();
        operator_JComboBox = new javax.swing.JComboBox<>();
        secondNum_JLabel = new javax.swing.JLabel();
        secondNum_JTextField = new javax.swing.JTextField();
        answer_JLabel = new javax.swing.JLabel();
        answer_JTextField = new javax.swing.JTextField();
        questions_JScrollPane = new javax.swing.JScrollPane();
        questions_JTable = new javax.swing.JTable();
        sort_JPanel = new javax.swing.JPanel();
        sort_JLabel = new javax.swing.JLabel();
        bubble_JButton = new javax.swing.JButton();
        selection_JButton = new javax.swing.JButton();
        insertion_JButton = new javax.swing.JButton();
        send_JButton = new javax.swing.JButton();
        exit_JButton = new javax.swing.JButton();
        linkedList_JPanel = new javax.swing.JPanel();
        linkedList_JLabel = new javax.swing.JLabel();
        displayList_JButton = new javax.swing.JButton();
        linkedList_JScrollPane = new javax.swing.JScrollPane();
        linkedList_JTextArea = new javax.swing.JTextArea();
        binaryTree_JPanel = new javax.swing.JPanel();
        binaryTree_JLabel = new javax.swing.JLabel();
        binaryTree_JScrollPane = new javax.swing.JScrollPane();
        binaryTree_JTextArea = new javax.swing.JTextArea();
        preOrder_JPanel = new javax.swing.JPanel();
        preOrder_JLabel = new javax.swing.JLabel();
        preOrderDisplay_JButton = new javax.swing.JButton();
        preOrderSave_JButton = new javax.swing.JButton();
        leftSpacer_JPanel = new javax.swing.JPanel();
        inOrder_JPanel = new javax.swing.JPanel();
        inOrder_JLabel = new javax.swing.JLabel();
        inOrderDisplay_JButton = new javax.swing.JButton();
        inOrderSave_JButton = new javax.swing.JButton();
        rightSpacer_JPanel = new javax.swing.JPanel();
        postOrder_JPanel = new javax.swing.JPanel();
        postOrder_JLabel = new javax.swing.JLabel();
        postOrderDisplay_JButton = new javax.swing.JButton();
        postOrderSave_JButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Teacher");
        setSize(new java.awt.Dimension(800, 665));

        core_JPanel.setBackground(new java.awt.Color(255, 250, 240));

        teacher_JPanel.setBackground(new java.awt.Color(0, 0, 200));
        teacher_JPanel.setPreferredSize(new java.awt.Dimension(400, 30));

        teacher_JLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        teacher_JLabel.setForeground(new java.awt.Color(255, 255, 255));
        teacher_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        teacher_JLabel.setText("Teacher");

        javax.swing.GroupLayout teacher_JPanelLayout = new javax.swing.GroupLayout(teacher_JPanel);
        teacher_JPanel.setLayout(teacher_JPanelLayout);
        teacher_JPanelLayout.setHorizontalGroup(
            teacher_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(teacher_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        teacher_JPanelLayout.setVerticalGroup(
            teacher_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(teacher_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        input_JPanel.setBackground(new java.awt.Color(214, 217, 223));
        input_JPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        input_JPanel.setPreferredSize(new java.awt.Dimension(200, 169));

        inputGuide_JLabel.setText("Enter question, then click Send");

        firstNum_JLabel.setText("First Number:");

        operator_JLabel.setText("Operator:");

        operator_JComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "+", "-", "*", "/" }));

        secondNum_JLabel.setText("Second Number:");

        answer_JLabel.setText("Answer:");

        answer_JTextField.setEditable(false);

        javax.swing.GroupLayout input_JPanelLayout = new javax.swing.GroupLayout(input_JPanel);
        input_JPanel.setLayout(input_JPanelLayout);
        input_JPanelLayout.setHorizontalGroup(
            input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputGuide_JLabel)
                    .addGroup(input_JPanelLayout.createSequentialGroup()
                        .addGroup(input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(operator_JLabel)
                            .addComponent(secondNum_JLabel)
                            .addComponent(answer_JLabel)
                            .addComponent(firstNum_JLabel))
                        .addGap(18, 18, 18)
                        .addGroup(input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNum_JTextField)
                            .addComponent(operator_JComboBox, 0, 81, Short.MAX_VALUE)
                            .addComponent(secondNum_JTextField)
                            .addComponent(answer_JTextField))))
                .addContainerGap())
        );

        input_JPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {answer_JLabel, firstNum_JLabel, operator_JLabel, secondNum_JLabel});

        input_JPanelLayout.setVerticalGroup(
            input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputGuide_JLabel)
                .addGap(18, 18, 18)
                .addGroup(input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNum_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNum_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operator_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operator_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondNum_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondNum_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(input_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(answer_JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(answer_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        questions_JTable.setModel(mathQuiz_TableModel);
        questions_JTable.getTableHeader().setReorderingAllowed(false);
        questions_JScrollPane.setViewportView(questions_JTable);

        sort_JPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        sort_JLabel.setText("Sort:");

        bubble_JButton.setText("1 - Bubble (asc)");
        bubble_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubble_JButtonActionPerformed(evt);
            }
        });

        selection_JButton.setText("2 - Selection (desc)");
        selection_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selection_JButtonActionPerformed(evt);
            }
        });

        insertion_JButton.setText("3 - Insertion (asc)");
        insertion_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertion_JButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sort_JPanelLayout = new javax.swing.GroupLayout(sort_JPanel);
        sort_JPanel.setLayout(sort_JPanelLayout);
        sort_JPanelLayout.setHorizontalGroup(
            sort_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sort_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sort_JLabel)
                .addGap(18, 18, 18)
                .addComponent(bubble_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(selection_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(insertion_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        sort_JPanelLayout.setVerticalGroup(
            sort_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sort_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sort_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sort_JLabel)
                    .addComponent(bubble_JButton)
                    .addComponent(selection_JButton)
                    .addComponent(insertion_JButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        send_JButton.setText("Send");
        send_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_JButtonActionPerformed(evt);
            }
        });

        exit_JButton.setText("Exit");
        exit_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_JButtonActionPerformed(evt);
            }
        });

        linkedList_JPanel.setBackground(new java.awt.Color(214, 217, 223));
        linkedList_JPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        linkedList_JLabel.setText("Linked List (of all incorrectly answered exercises):");

        javax.swing.GroupLayout linkedList_JPanelLayout = new javax.swing.GroupLayout(linkedList_JPanel);
        linkedList_JPanel.setLayout(linkedList_JPanelLayout);
        linkedList_JPanelLayout.setHorizontalGroup(
            linkedList_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkedList_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(linkedList_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        linkedList_JPanelLayout.setVerticalGroup(
            linkedList_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkedList_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(linkedList_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        displayList_JButton.setText("Display List");
        displayList_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayList_JButtonActionPerformed(evt);
            }
        });

        linkedList_JScrollPane.setPreferredSize(new java.awt.Dimension(166, 924));

        linkedList_JTextArea.setEditable(false);
        linkedList_JTextArea.setColumns(20);
        linkedList_JScrollPane.setViewportView(linkedList_JTextArea);

        binaryTree_JPanel.setBackground(new java.awt.Color(214, 217, 223));
        binaryTree_JPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        binaryTree_JLabel.setText("Binary Tree (of all question - added in the order that they were asked):");

        javax.swing.GroupLayout binaryTree_JPanelLayout = new javax.swing.GroupLayout(binaryTree_JPanel);
        binaryTree_JPanel.setLayout(binaryTree_JPanelLayout);
        binaryTree_JPanelLayout.setHorizontalGroup(
            binaryTree_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(binaryTree_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(binaryTree_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        binaryTree_JPanelLayout.setVerticalGroup(
            binaryTree_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(binaryTree_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(binaryTree_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        binaryTree_JScrollPane.setPreferredSize(new java.awt.Dimension(166, 924));

        binaryTree_JTextArea.setEditable(false);
        binaryTree_JTextArea.setColumns(20);
        binaryTree_JScrollPane.setViewportView(binaryTree_JTextArea);

        preOrder_JPanel.setBackground(new java.awt.Color(0, 0, 200));

        preOrder_JLabel.setForeground(new java.awt.Color(255, 255, 255));
        preOrder_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        preOrder_JLabel.setText("Pre-Order");

        javax.swing.GroupLayout preOrder_JPanelLayout = new javax.swing.GroupLayout(preOrder_JPanel);
        preOrder_JPanel.setLayout(preOrder_JPanelLayout);
        preOrder_JPanelLayout.setHorizontalGroup(
            preOrder_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preOrder_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(preOrder_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        preOrder_JPanelLayout.setVerticalGroup(
            preOrder_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preOrder_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(preOrder_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        preOrderDisplay_JButton.setText("Display");
        preOrderDisplay_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preOrderDisplay_JButtonActionPerformed(evt);
            }
        });

        preOrderSave_JButton.setText("Save");
        preOrderSave_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preOrderSave_JButtonActionPerformed(evt);
            }
        });

        leftSpacer_JPanel.setBackground(new java.awt.Color(255, 250, 240));

        javax.swing.GroupLayout leftSpacer_JPanelLayout = new javax.swing.GroupLayout(leftSpacer_JPanel);
        leftSpacer_JPanel.setLayout(leftSpacer_JPanelLayout);
        leftSpacer_JPanelLayout.setHorizontalGroup(
            leftSpacer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        leftSpacer_JPanelLayout.setVerticalGroup(
            leftSpacer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        inOrder_JPanel.setBackground(new java.awt.Color(0, 0, 200));

        inOrder_JLabel.setForeground(new java.awt.Color(255, 255, 255));
        inOrder_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inOrder_JLabel.setText("In-Order");

        javax.swing.GroupLayout inOrder_JPanelLayout = new javax.swing.GroupLayout(inOrder_JPanel);
        inOrder_JPanel.setLayout(inOrder_JPanelLayout);
        inOrder_JPanelLayout.setHorizontalGroup(
            inOrder_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inOrder_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inOrder_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        inOrder_JPanelLayout.setVerticalGroup(
            inOrder_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inOrder_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inOrder_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inOrderDisplay_JButton.setText("Display");
        inOrderDisplay_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inOrderDisplay_JButtonActionPerformed(evt);
            }
        });

        inOrderSave_JButton.setText("Save");
        inOrderSave_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inOrderSave_JButtonActionPerformed(evt);
            }
        });

        rightSpacer_JPanel.setBackground(new java.awt.Color(255, 250, 240));

        javax.swing.GroupLayout rightSpacer_JPanelLayout = new javax.swing.GroupLayout(rightSpacer_JPanel);
        rightSpacer_JPanel.setLayout(rightSpacer_JPanelLayout);
        rightSpacer_JPanelLayout.setHorizontalGroup(
            rightSpacer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rightSpacer_JPanelLayout.setVerticalGroup(
            rightSpacer_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        postOrder_JPanel.setBackground(new java.awt.Color(0, 0, 200));

        postOrder_JLabel.setForeground(new java.awt.Color(255, 255, 255));
        postOrder_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        postOrder_JLabel.setText("Post-Order");

        javax.swing.GroupLayout postOrder_JPanelLayout = new javax.swing.GroupLayout(postOrder_JPanel);
        postOrder_JPanel.setLayout(postOrder_JPanelLayout);
        postOrder_JPanelLayout.setHorizontalGroup(
            postOrder_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(postOrder_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(postOrder_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        postOrder_JPanelLayout.setVerticalGroup(
            postOrder_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(postOrder_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(postOrder_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        postOrderDisplay_JButton.setText("Display");
        postOrderDisplay_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postOrderDisplay_JButtonActionPerformed(evt);
            }
        });

        postOrderSave_JButton.setText("Save");
        postOrderSave_JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postOrderSave_JButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout core_JPanelLayout = new javax.swing.GroupLayout(core_JPanel);
        core_JPanel.setLayout(core_JPanelLayout);
        core_JPanelLayout.setHorizontalGroup(
            core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(core_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linkedList_JScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teacher_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(core_JPanelLayout.createSequentialGroup()
                        .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(input_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(core_JPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(send_JButton)))
                        .addGap(10, 10, 10)
                        .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, core_JPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(exit_JButton))
                            .addComponent(questions_JScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                            .addComponent(sort_JPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(core_JPanelLayout.createSequentialGroup()
                        .addComponent(linkedList_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(displayList_JButton))
                    .addComponent(binaryTree_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(binaryTree_JScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(core_JPanelLayout.createSequentialGroup()
                        .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(preOrder_JPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(core_JPanelLayout.createSequentialGroup()
                                .addComponent(preOrderDisplay_JButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(preOrderSave_JButton)))
                        .addGap(18, 18, 18)
                        .addComponent(leftSpacer_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(core_JPanelLayout.createSequentialGroup()
                                .addComponent(inOrderDisplay_JButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inOrderSave_JButton))
                            .addComponent(inOrder_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(rightSpacer_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(core_JPanelLayout.createSequentialGroup()
                                .addComponent(postOrderDisplay_JButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postOrderSave_JButton))
                            .addComponent(postOrder_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        core_JPanelLayout.setVerticalGroup(
            core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(core_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(teacher_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, core_JPanelLayout.createSequentialGroup()
                        .addComponent(questions_JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sort_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(input_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit_JButton)
                    .addComponent(send_JButton))
                .addGap(18, 18, 18)
                .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(linkedList_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayList_JButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(linkedList_JScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(binaryTree_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(binaryTree_JScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rightSpacer_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(core_JPanelLayout.createSequentialGroup()
                        .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(preOrder_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inOrder_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postOrder_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(core_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(preOrderDisplay_JButton)
                            .addComponent(preOrderSave_JButton)
                            .addComponent(inOrderDisplay_JButton)
                            .addComponent(inOrderSave_JButton)
                            .addComponent(postOrderDisplay_JButton)
                            .addComponent(postOrderSave_JButton)))
                    .addComponent(leftSpacer_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(core_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(core_JPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Parses input fields and sends data to client.
     * @param evt 
     */
    private void send_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_JButtonActionPerformed
        String mathQues;
        String operator = operator_JComboBox.getSelectedItem().toString();
        int number1, number2;
        try { // Parse as numbers to ensure that the input is numeric. If not, NumberFormatException will occur and student will be informed to only use numerics.
            number1 = Integer.parseInt(firstNum_JTextField.getText());
            number2 = Integer.parseInt(secondNum_JTextField.getText());
        } catch(NumberFormatException e) {
            String exceptionStr = "ERROR: One or both numeric fields are empty or contain non-numeric values!";
            JOptionPane.showMessageDialog(null, exceptionStr, "SORRY - CHECK YOUR NUMBERS PLEASE!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int result;
        switch(operator_JComboBox.getSelectedItem().toString()) { // Check operator value and perform appropriate sum.
            case "+": result = number1 + number2; break;
            case "-": result = number1 - number2; break;
            case "*": result = number1 * number2; break;
            case "/": result = number1 / number2; break;
            default: result = -999; break;
        }
        if(result != -999) {
            Integer resultInt = result;
            answer_JTextField.setText(resultInt.toString());
        }
        
        q = new Question(number1, operator, number2, result); // Declare a new question to add to the array, BinaryTree, and LinkedList data fields.
        mathQues = number1 + " " + operator + " " + number2 + " = " + result; // Question to send to the client.
        
        arrayMathQuestions.add(q); // Add newest question to arrayMathQuestions.
        btMathQuestions.add(q); // Add newest question to BinaryTree.
        
        String binTreeTextField = binaryTree_JTextArea.getText();
        binaryTree_JTextArea.setText(binTreeTextField + "\n" + mathQues); // Keep existing BinaryTree data and add a new line with the new data.
        try {
            if(binaryTree_JTextArea.getText(0, 1).equals("\n")) {// Checks for and removes empty line at the top of the binaryTree_JTextArea.
                binaryTree_JTextArea.replaceRange(null, 0, 1);
            } else if(binaryTree_JTextArea.getText().equals("There are no math questions to save") || binaryTree_JTextArea.getText().equals("There are no math questions to display")) {
                // Replaces previous request where data was empty with new request, effectively replacing the error message with the new content.
                binaryTree_JTextArea.setText(mathQues);
            }
        } catch (BadLocationException e) { // Triggers if the data selected in the .replaceRange() operation is outside of binaryTree_JTextArea bounds. This is theoretically impossible to triggered with the current code but just in case...
            String exceptionStr = "Binary Tree deletion out of range: " + e.getMessage();
            JOptionPane.showMessageDialog(null, exceptionStr, "BAD LOCATION EXCEPTION", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            dataOutputStream.writeUTF(mathQues); // Send question to client.
            send_JButton.setEnabled(false);
            displayTable(); // Update table to display existing and new questions.
        } catch(IOException e) { // Catches error if client does not confirm receipt.
            String exceptionStr = "Server Send Error: " + e.getMessage();
            JOptionPane.showMessageDialog(null, exceptionStr, "SERVER SEND ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_send_JButtonActionPerformed

    /**
     * Displays binary tree data in pre-order form.
     * @param evt 
     */
    private void preOrderDisplay_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preOrderDisplay_JButtonActionPerformed
        String type = "preorder";
        binaryTree_JTextArea.setText(orderToDisplay(type));
    }//GEN-LAST:event_preOrderDisplay_JButtonActionPerformed

    /**
     * Closes socket, hides the window, returns allocated resources back to OS and closes the program with an exit code of 0. Intentionally causes SocketException for student client.
     * @param evt 
     */
    private void exit_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_JButtonActionPerformed
        try {
            serverSocket.close();
        } catch(IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SOCKET TERMINATION ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
        setVisible(false);
        dispose();
        System.exit(0);
    }//GEN-LAST:event_exit_JButtonActionPerformed

    /**
     * Performs bubble sort when action is performed on Bubble Sort (asc) button.
     * @param evt 
     */
    private void bubble_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubble_JButtonActionPerformed
        if(arrayMathQuestions.size() > 0) {
            bubbleSort("asc");
            displayTable();
        }
    }//GEN-LAST:event_bubble_JButtonActionPerformed

    /**
     * Performs selection sort when action is performed on Selection Sort (desc) button.
     * @param evt 
     */
    private void selection_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selection_JButtonActionPerformed
        if(arrayMathQuestions.size() > 0) {
            selectionSort("desc");
            displayTable();
        }
    }//GEN-LAST:event_selection_JButtonActionPerformed

    /**
     * Performs insertion sort when action is performed on Insertion Sort (asc) button.
     * @param evt 
     */
    private void insertion_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertion_JButtonActionPerformed
        if(arrayMathQuestions.size() > 0) {
            insertionSort("asc");
            displayTable();
        }
    }//GEN-LAST:event_insertion_JButtonActionPerformed

    /**
     * Displays binary tree data in in-order form.
     * @param evt 
     */
    private void inOrderDisplay_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inOrderDisplay_JButtonActionPerformed
        String type = "inorder";
        binaryTree_JTextArea.setText(orderToDisplay(type));
    }//GEN-LAST:event_inOrderDisplay_JButtonActionPerformed

    /**
     * Displays binary tree data in post-order form.
     * @param evt 
     */
    private void postOrderDisplay_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postOrderDisplay_JButtonActionPerformed
        String type = "postorder";
        binaryTree_JTextArea.setText(orderToDisplay(type));
    }//GEN-LAST:event_postOrderDisplay_JButtonActionPerformed

    /**
     * Saves binary tree data in pre-order form.
     * @param evt 
     */
    private void preOrderSave_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preOrderSave_JButtonActionPerformed
        String type = "preorder";
        writeToFile(type);
    }//GEN-LAST:event_preOrderSave_JButtonActionPerformed

    /**
     * Saves binary tree data in in-order form.
     * @param evt 
     */
    private void inOrderSave_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inOrderSave_JButtonActionPerformed
        String type = "inorder";
        writeToFile(type);
    }//GEN-LAST:event_inOrderSave_JButtonActionPerformed

    /**
     * Saves binary tree data in post-order form.
     * @param evt 
     */
    private void postOrderSave_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postOrderSave_JButtonActionPerformed
        String type = "postorder";
        writeToFile(type);
    }//GEN-LAST:event_postOrderSave_JButtonActionPerformed

    /**
     * Displays Linked List data when action is performed on Display List button.
     * @param evt 
     */
    private void displayList_JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayList_JButtonActionPerformed
        if (listMathQuestions.size() > 0) {
            String listDisplay = "HEAD <-> ";
            for (int i = 0; i < listMathQuestions.size(); i++) { // Iterate over listMathQuestions and add a node for each question to the listDisplay String.
                listDisplay += listMathQuestions.get(i).toString() + "<-> ";
            }
            listDisplay += " TAIL";
            linkedList_JTextArea.setText(listDisplay);
        } else {
            System.out.println("There is nothing in the linked list so this button doesn't have much of an effect now, does it?");
        }
    }//GEN-LAST:event_displayList_JButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MathQuiz_Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MathQuiz_Teacher().setVisible(true);
        });
        
        try {
            serverSocket = new ServerSocket(1201); // Create new TCP/IP host socket for client.
            socket = serverSocket.accept(); // Accept incoming client connection.
            dataInputStream = new DataInputStream(socket.getInputStream()); // Create input stream for socket.
            dataOutputStream = new DataOutputStream(socket.getOutputStream()); // Create output stream for socket.
            String messageIn = "";
            while(!messageIn.equals("exit")) {
                messageIn = dataInputStream.readUTF(); // Read incoming messages expected to be in UTF format.
                switch(messageIn) {
                    case "y":
                        send_JButton.setEnabled(true);
                        linkedList_JTextArea.setText("Student answered correctly");
                        break;
                    case "n":
                        listMathQuestions.add(q);
                        send_JButton.setEnabled(true);
                        linkedList_JTextArea.setText("Student answered incorrectly");
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Student answer was not a valid response. Student answer:\n" + messageIn, "Invalid response", JOptionPane.WARNING_MESSAGE);
                        break;
                }
                firstNum_JTextField.setText("");
                secondNum_JTextField.setText("");
                answer_JTextField.setText("");
            }
        } catch(SocketException e) {
            String exceptionStr = "Server Socket Error: " + e.getMessage();
            JOptionPane.showMessageDialog(null, exceptionStr, "SERVER ERROR", JOptionPane.ERROR_MESSAGE);
        } catch(IOException e) {
            String exceptionStr = "IO Exception: " + e.getMessage();
            JOptionPane.showMessageDialog(null, exceptionStr, "SERVER ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void displayTable() { // Display and update data in questions table.
        if(mathQuiz_TableModel.getRowCount() > 0) { // Iterate through table and remove existing rows to prevent duplicate data.
            for(int i = mathQuiz_TableModel.getRowCount() - 1; i > -1; i--) {
                mathQuiz_TableModel.removeRow(i);
            }
        }
        
        Object [] obj = new Object[5];
        objDataSet = new Object[arrayMathQuestions.size()][];
        for(int i = 0; i < arrayMathQuestions.size(); i++) { // Iterate through arrayMathQuestions and add existing and new data to table.
            obj[0] = arrayMathQuestions.get(i).getLOp();
            obj[1] = arrayMathQuestions.get(i).getOperator();
            obj[2] = arrayMathQuestions.get(i).getROp();
            obj[3] = "=";
            obj[4] = arrayMathQuestions.get(i).getAnswer();
            objDataSet[i] = obj;
            mathQuiz_TableModel.addRow(objDataSet[i]);
        }
        mathQuiz_TableModel.fireTableDataChanged();
    }
    
    public void bubbleSort(String order) { // Sort arrayMathQuestions using bubble sort formula.
        if(arrayMathQuestions.isEmpty()) {
            return;
        }
        Question[] quizzes = arrayMathQuestions.toArray(new Question[arrayMathQuestions.size()]);
        for(int i = 0; i < quizzes.length; i++) {
            for(int j = 0; j < quizzes.length - 1; j++) {
                if(order.equals("asc")) {
                    if(quizzes[i].compareTo(quizzes[j]) < 0) {
                        Question temp = quizzes[i];
                        quizzes[i] = quizzes[j];
                        quizzes[j] = temp;
                    }
                } else if(order.equals("desc")) {
                    if(quizzes[i].compareTo(quizzes[j]) > 0) {
                        Question temp = quizzes[i];
                        quizzes[i] = quizzes[j];
                        quizzes[j] = temp;
                    }
                }
            }
        }
        arrayMathQuestions = new ArrayList<>(Arrays.asList(quizzes));
    }
    
    public void selectionSort(String order) { // Sort arrayMathQuestions using selection sort formula.
        if(arrayMathQuestions.isEmpty()) {
            return;
        }
        Question[] quizzes = arrayMathQuestions.toArray(new Question[arrayMathQuestions.size()]);
        for(int i = 0; i < quizzes.length - 1; i++) {
            for(int j = i + 1; j < quizzes.length; j++) {
                if(order.equals("asc")) {
                    if(quizzes[j].compareTo(quizzes[i]) < 0) {
                        Question temp = quizzes[j];
                        quizzes[j] = quizzes[i];
                        quizzes[i] = temp;
                    }
                } else if(order.equals("desc")) {
                    if(quizzes[j].compareTo(quizzes[i]) > 0) {
                        Question temp = quizzes[j];
                        quizzes[j] = quizzes[i];
                        quizzes[i] = temp;
                    }
                }
            }
        }
        arrayMathQuestions = new ArrayList<>(Arrays.asList(quizzes));
    }
    
    public void insertionSort(String order) { // Sort arrayMathQuestions using insertion sort formula.
        if(arrayMathQuestions.isEmpty()) {
            return;
        }
        Question[] quizzes = arrayMathQuestions.toArray(new Question[arrayMathQuestions.size()]);
        for(int i = 1; i < quizzes.length; i++) {
            for(int j = i; j > 0; j--) {
                if(order.equals("asc")) {
                    if(quizzes[j].compareTo(quizzes[j - 1]) < 0) {
                        Question temp = quizzes[j];
                        quizzes[j] = quizzes[j - 1];
                        quizzes[j - 1] = temp;
                    }
                } else if(order.equals("desc")) {
                    if(quizzes[j].compareTo(quizzes[j - 1]) > 0) {
                        Question temp = quizzes[j];
                        quizzes[j] = quizzes[j - 1];
                        quizzes[j - 1] = temp;
                    }
                }
            }
        }
        arrayMathQuestions = new ArrayList<>(Arrays.asList(quizzes));
    }
    
    public void writeToFile(String type) { // Write sorted BinaryTree data to file.
        if(btMathQuestions.size() > 0) {
            int yesOrNo = JOptionPane.showConfirmDialog(null, "You are about to write " + orderToDisplay(type) + " to the external file: " + type + ".txt\nDo you wish to continue?", "External file write", JOptionPane.YES_NO_OPTION);
            if(yesOrNo == JOptionPane.YES_OPTION) {
                if(Files.exists(Paths.get("./" + type + ".txt"))) {
                    if(Files.isWritable(Paths.get("./" + type + ".txt"))) {
                        try {
                            Files.writeString(Paths.get("./" + type + ".txt"), orderToDisplay(type));
                        } catch(IOException e) {
                            JOptionPane.showMessageDialog(null, "Error while writing to file: " + Paths.get("").toAbsolutePath() + type + ".txt\n" + e.getMessage(), "File Write Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Insufficient permissions to write to file: " + Paths.get("").toAbsolutePath() + "\\" + type + ".txt\n", "File Write Permission Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    try {
                        Files.createFile(Paths.get("./" + type + ".txt"));
                    } catch(IOException e) {
                        JOptionPane.showMessageDialog(null, "Could not create the \"" + type + ".txt\" file in the following directory: " + Paths.get("").toAbsolutePath() + "\n" + e.getMessage(), "File Creation Error", JOptionPane.ERROR_MESSAGE);
                    }
                    if(Files.exists(Paths.get("./" + type + ".txt"))) {
                        try {
                            Files.writeString(Paths.get("./" + type + ".txt"), orderToDisplay(type));
                        } catch(IOException e) {
                            JOptionPane.showMessageDialog(null, "Error while writing to file: " + Paths.get("").toAbsolutePath() + type + ".txt:\n" + e.getMessage(), "File Write Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        } else {
            binaryTree_JTextArea.setText("There are no math questions to save");
        }
    }
    
    public String orderToDisplay(String order) { // Perform BinaryTree sort operation and return a string containing the sorted BinaryTree contents.
        String orderDisplay = "";
        if(btMathQuestions.size() > 0) {
            btMathQuestions.reSetTraversalString();
            switch(order) {
                case "preorder":
                    btMathQuestions.preOrder(btMathQuestions.getRoot());
                    orderDisplay = "PRE-ORDER: " + btMathQuestions.getTraversalString();
                    break;
                case "inorder":
                    btMathQuestions.inOrder(btMathQuestions.getRoot());
                    orderDisplay = "IN-ORDER: " + btMathQuestions.getTraversalString();
                    break;
                case "postorder":
                    btMathQuestions.postOrder(btMathQuestions.getRoot());
                    orderDisplay = "POST-ORDER: " + btMathQuestions.getTraversalString();
                    break;
                default: orderDisplay = "{INVALID/EMPTY DATA}"; break;
            }
        } else {
            binaryTree_JTextArea.setText("There are no math questions to display");
        }
        return orderDisplay;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answer_JLabel;
    private static javax.swing.JTextField answer_JTextField;
    private javax.swing.JLabel binaryTree_JLabel;
    private javax.swing.JPanel binaryTree_JPanel;
    private javax.swing.JScrollPane binaryTree_JScrollPane;
    private javax.swing.JTextArea binaryTree_JTextArea;
    private javax.swing.JButton bubble_JButton;
    private javax.swing.JPanel core_JPanel;
    private javax.swing.JButton displayList_JButton;
    private javax.swing.JButton exit_JButton;
    private javax.swing.JLabel firstNum_JLabel;
    private static javax.swing.JTextField firstNum_JTextField;
    private javax.swing.JButton inOrderDisplay_JButton;
    private javax.swing.JButton inOrderSave_JButton;
    private javax.swing.JLabel inOrder_JLabel;
    private javax.swing.JPanel inOrder_JPanel;
    private javax.swing.JLabel inputGuide_JLabel;
    private javax.swing.JPanel input_JPanel;
    private javax.swing.JButton insertion_JButton;
    private javax.swing.JPanel leftSpacer_JPanel;
    private javax.swing.JLabel linkedList_JLabel;
    private javax.swing.JPanel linkedList_JPanel;
    private javax.swing.JScrollPane linkedList_JScrollPane;
    private static javax.swing.JTextArea linkedList_JTextArea;
    private javax.swing.JComboBox<String> operator_JComboBox;
    private javax.swing.JLabel operator_JLabel;
    private javax.swing.JButton postOrderDisplay_JButton;
    private javax.swing.JButton postOrderSave_JButton;
    private javax.swing.JLabel postOrder_JLabel;
    private javax.swing.JPanel postOrder_JPanel;
    private javax.swing.JButton preOrderDisplay_JButton;
    private javax.swing.JButton preOrderSave_JButton;
    private javax.swing.JLabel preOrder_JLabel;
    private javax.swing.JPanel preOrder_JPanel;
    private javax.swing.JScrollPane questions_JScrollPane;
    private javax.swing.JTable questions_JTable;
    private javax.swing.JPanel rightSpacer_JPanel;
    private javax.swing.JLabel secondNum_JLabel;
    private static javax.swing.JTextField secondNum_JTextField;
    private javax.swing.JButton selection_JButton;
    private static javax.swing.JButton send_JButton;
    private javax.swing.JLabel sort_JLabel;
    private javax.swing.JPanel sort_JPanel;
    private javax.swing.JLabel teacher_JLabel;
    private javax.swing.JPanel teacher_JPanel;
    // End of variables declaration//GEN-END:variables

}
